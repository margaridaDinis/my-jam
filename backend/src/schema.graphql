# import * from './generated/prisma.graphql'
type SuccessMessage {
  message: String
}

type Mutation {
  createAlbum(
    year: Int,
    name: String,
    artists: [String],
    description: String,
    image: String,
    genres: [String],
    largeImage: String
    location: String
    type: String
  ): Album!
  updateAlbum(
    id: ID!,
    year: Int,
    name: String,
    artists: [String],
    description: String,
    genres: [String],
    image: String,
    largeImage: String
    location: String
    type: String
  ): Album!
  deleteAlbum(id: ID!): Album
  signUp(email: String!, password: String!, name: String!): User!
  signIn(email: String!, password: String!): User!
  signOut: SuccessMessage
  requestReset(email: String!): SuccessMessage
  resetPassword(resetToken: String!, password: String!, confirmPassword: String!): User!
  updatePermissions(permissions: [Permission], userId: ID!): User!
  createGenre(name: String!): Genre!
  updateGenre(id: ID!, name: String!): Genre!
  deleteGenre(id: ID!): Genre!
  createArtist(name: String!): Artist!
  updateArtist(id: ID!, name: String!): Artist!
  deleteArtist(id: ID!): Artist!
  createLocation(name: String!, description: String): Location!
  updateLocation(id: ID!, name: String!, description: String): Location!
  deleteLocation(id: ID!): Location!
}

type Query {
  albums(where: AlbumWhereInput, orderBy: AlbumOrderByInput, skip: Int, first: Int): [Album]!
  album(where: AlbumWhereUniqueInput): Album
  albumsConnection(where: AlbumWhereInput): AlbumConnection!
  me: User
  users: [User]!
  genres: [Genre]!
  genre(where: GenreWhereUniqueInput): Genre
  artists: [Artist]!
  artist(where: ArtistWhereUniqueInput): Artist
  locations: [Location]!
  location(where: LocationWhereUniqueInput): Location
}

type User {
  id: ID!
  name: String!
  email: String!
  permissions: [Permission!]!
}
